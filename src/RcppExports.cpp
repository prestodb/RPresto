// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// check_names
SEXP check_names(List x, int column_count);
RcppExport SEXP _RPresto_check_names(SEXP xSEXP, SEXP column_countSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type column_count(column_countSEXP);
    rcpp_result_gen = Rcpp::wrap(check_names(x, column_count));
    return rcpp_result_gen;
END_RCPP
}
// transpose
List transpose(List input, List output);
RcppExport SEXP _RPresto_transpose(SEXP inputSEXP, SEXP outputSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type input(inputSEXP);
    Rcpp::traits::input_parameter< List >::type output(outputSEXP);
    rcpp_result_gen = Rcpp::wrap(transpose(input, output));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_RPresto_check_names", (DL_FUNC) &_RPresto_check_names, 2},
    {"_RPresto_transpose", (DL_FUNC) &_RPresto_transpose, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_RPresto(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
